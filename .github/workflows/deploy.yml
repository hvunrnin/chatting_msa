name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 가져오기
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. chat-producer 빌드
      - name: Make gradlew executable (producer)
        run: chmod +x chat-producer/gradlew

      - name: Build JAR for chat-producer
        run: cd chat-producer && ./gradlew bootJar

      # 4. chat-consumer 빌드
      - name: Make gradlew executable (consumer)
        run: chmod +x chat-consumer/gradlew

      - name: Build JAR for chat-consumer
        run: cd chat-consumer && ./gradlew bootJar

      # 5. 빌드된 JAR 확인 (디버깅용)
      - name: Debug — Check built files
        run: |
          echo "✅ Checking producer JAR..."
          ls -al chat-producer/build/libs
          echo "✅ Checking consumer JAR..."
          ls -al chat-consumer/build/libs

      # 6. 배포 디렉토리 구성
      - name: Prepare deployment files
        run: |
          mkdir deploy-files
          cp chat-producer/build/libs/app.jar deploy-files/chat-producer.jar
          cp chat-consumer/build/libs/app.jar deploy-files/chat-consumer.jar
          cp docker-compose.yml deploy-files/
          cp -r nginx deploy-files/
          cp -r chat-producer deploy-files/
          cp -r chat-consumer deploy-files/

      # 7. SSH 연결 확인
      - name: Test SSH connection (debug)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "✅ SSH 접속 성공"
            hostname
            whoami

      # 8. application-aws.yml 업로드 (분리된 내용)
      - name: Upload application.yml for each service
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "${{ secrets.APPLICATION_AWS_YML_PRODUCER_B64 }}" | base64 -d > /home/ubuntu/chat-app/deploy-files/chat-producer/src/main/resources/application.yml
            echo "${{ secrets.APPLICATION_AWS_YML_CONSUMER_B64 }}" | base64 -d > /home/ubuntu/chat-app/deploy-files/chat-consumer/src/main/resources/application.yml
            chmod 600 /home/ubuntu/chat-app/deploy-files/chat-*/src/main/resources/application.yml

      # 9. EC2에 파일 복사
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: deploy-files/
          target: "/home/ubuntu/chat-app"
          timeout: 120s
          command_timeout: 120s

      # 10. EC2에서 Docker 재시작
      - name: SSH and deploy with docker-compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/chat-app/deploy-files
            sudo docker-compose down
            sudo docker-compose up --build -d
